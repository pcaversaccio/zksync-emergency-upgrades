#!/usr/bin/env bash

########################
# Don't trust, verify! #
########################

# @license GNU Affero General Public License v3.0 only
# @author pcaversaccio

# Enable strict error handling:
# -E: Inherit `ERR` traps in functions and subshells.
# -e: Exit immediately if a command exits with a non-zero status.
# -u: Treat unset variables as an error and exit.
# -o pipefail: Return the exit status of the first failed command in a pipeline.
set -Eeuo pipefail

# Enable debug mode if the environment variable `DEBUG` is set to `true`.
if [[ "${DEBUG:-false}" == "true" ]]; then
	# Print each command before executing it.
	set -x
fi

# Define the parameters for the `UpgradeProposal` struct.
# The calldata decodes to (always verify this yourself!):
# - `0xe28ad831d216fcd71bf3944867f3834db55ed382` = Upgrade stage validator contract
#   - `0x37076ce3` = `bytes4(keccak256("checkProtocolUpgradePresence()"))`
# - `0x303a465b659cbb0ab36ee643ea362c509eeb5213` = ZK bridge hub contract
#   - `0xf7c7eb92` = `bytes4(keccak256("unpauseMigration()"))`
# - `0x66a5cfb2e9c529f14fe6364ad1075df3a649c0a5` = ZK token contract
#   - `0x095ea7b30000000000000000000000008829ad80e425c646dab305381ff105169feece5600000000000000000000000000000000000000000000000a4cc799563c380000` = `bytes4(keccak256("approve(address,uint256)"))`
#     - `0x8829AD80E425C646DAB305381ff105169FeEcE56` = ZK stack shared bridge
#     - amount = 190,000,000,000,000,000,000 (`decimals` are `18`)
# - `0x303a465b659cbb0ab36ee643ea362c509eeb5213` = ZK bridge hub contract
#    - `0xd52471c10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000237300000000000000000000000000000000000000000000000a4cc799563c38000000000000000000000000000000000000000000000000000000000000000100020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000001600000000000000000000000003aceb2e5a1e46d491a72783acc7ee64e904a787a0000000000000000000000000000000000000000000000000000000000000004f7c7eb92000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000` = `bytes4(keccak256("requestL2TransactionDirect((uint256,uint256,address,uint256,bytes,uint256,uint256,bytes[],address))"))`
#    - _request (tuple)
#      - chainId = 9075 (ZK Gateway)
#      - mintValue = 190,000,000,000,000,000,000
#      - l2Contract = 0x0000000000000000000000000000000000010002 (Bridge Hub)
#      - l2Value = 0
#      - l2Calldata = 0xf7c7eb92 (`bytes4(keccak256("unpauseMigration()"))`)
#      - l2GasLimit = 2,000,000
#      - l2GasPerPubdataByteLimit = 800
#      - factoryDeps = []
#      - refundRecipient = 0x3AcEB2E5a1e46d491a72783Acc7EE64E904a787a (Refund recipient EOA controlled by Matter Labs)
# - `0xe28ad831d216fcd71bf3944867f3834db55ed382` = Upgrade stage validator contract
#   - `0x407a5a0b` = `bytes4(keccak256("checkMigrationsUnpaused()"))`
CALLS="[(0xe28ad831d216fcd71bf3944867f3834db55ed382,0,0x37076ce3),\
				 (0x303a465b659cbb0ab36ee643ea362c509eeb5213,0,0xf7c7eb92),\
				 (0x66a5cfb2e9c529f14fe6364ad1075df3a649c0a5,0,0x095ea7b30000000000000000000000008829ad80e425c646dab305381ff105169feece5600000000000000000000000000000000000000000000000a4cc799563c380000),\
                 (0x303a465b659cbb0ab36ee643ea362c509eeb5213,0,0xd52471c10000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000237300000000000000000000000000000000000000000000000a4cc799563c38000000000000000000000000000000000000000000000000000000000000000100020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000001e8480000000000000000000000000000000000000000000000000000000000000032000000000000000000000000000000000000000000000000000000000000001600000000000000000000000003aceb2e5a1e46d491a72783acc7ee64e904a787a0000000000000000000000000000000000000000000000000000000000000004f7c7eb92000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000),\
                 (0xe28ad831d216fcd71bf3944867f3834db55ed382,0,0x407a5a0b)]"

# Define the executor contract.
readonly EXECUTOR="0xECE8e30bFc92c2A8e11e6cb2e17B70868572E3f6"

# Salt value as a hex string.
readonly SALT="0x0000000000000000000000000000000000000000000000000000000000000000"

# Encode the `UpgradeProposal` struct.
encoded_proposal=$(cast abi-encode "UpgradeProposal(((address,uint256,bytes)[],address,bytes32))" "($CALLS,$EXECUTOR,$SALT)")

# Compute the `keccak256` hash of the encoded proposal.
proposal_id=$(cast keccak "$encoded_proposal")

# Save the proposal ID to a file.
echo "$proposal_id" >proposal_id.txt

# Output the result.
echo "Encoded \`UpgradeProposal\` struct (stage 2): $encoded_proposal"
echo "Proposal ID: $proposal_id"
